name: 'deploy'
on:
  push:
    paths:
      - '.github/workflows/**'
      - 'src/**'
      - 'build.gradle'
      - 'Dockerfile'
      - 'readme.md'
      - 'infraScript/**'
    branches:
      - 'main' # 본인 브랜치 확인
jobs:
  makeTagAndRelease:
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: create_tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # 발급 받은 깃허브 토큰으로
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # 발급 받은 깃허브 토큰으로
        with:
          tag_name: ${{ steps.create_tag.outputs.new_tag }}
          release_name: Release ${{ steps.create_tag.outputs.new_tag }}
          body: ${{ steps.create_tag.outputs.changelog }}
          draft: false
          prerelease: false
  ## 자동화 코드
  buildImageAndPush:
    name: 도커 이미지 빌드와 푸시
    needs: makeTagAndRelease
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Docker Buildx 설치
        uses: docker/setup-buildx-action@v2
      - name: 레지스트리 로그인
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >> ${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"
      - name: application-secret.yml 생성
        env:
          ACTIONS_STEP_DEBUG: true
          APPLICATION_SECRET: ${{ secrets.APPLICATION_SECRET_YML }}
        run: echo "$APPLICATION_SECRET" > src/main/resources/application-secret.yml
      - name: 빌드 앤 푸시
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/surl:${{ needs.makeTagAndRelease.outputs.tag_name }},
            ghcr.io/${{ env.OWNER_LC }}/surl:latest
  deploy:
#    runs-on: ubuntu-latest
#    needs: [ buildImageAndPush ]
#    steps:
#      - name: AWS SSM Send-Command
#        uses: peterkimzz/aws-ssm-send-command@master
#        id: ssm
#        with:
#          aws-region: ${{ secrets.AWS_REGION }}
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          instance-ids: "i-0b0c759179763a6b4" # 본인 인스턴스 ID
#          working-directory: /
#          comment: Deploy
#          command: | # surl : 도커이미지명, Yu-Geun-Chan : 깃허브 ID, Surl_project_11 : 깃허브 리포지터리명, main : 본인 브랜치
#            mkdir -p /dockerProjects/surl
#            curl -o /dockerProjects/surl/zero_downtime_deploy.py https://raw.githubusercontent.com/Yu-Geun-Chan/Surl_project_11/main/infraScript/zero_downtime_deploy.py
#            chmod +x /dockerProjects/surl/zero_downtime_deploy.py
#            /dockerProjects/surl/zero_downtime_deploy.py